# see https://github.com/ghcr.io/arm64-compat/confluentinc/cp-all-in-one/blob/7.0.1-post/cp-all-in-one/docker-compose.yml
---
version: '3.8'
services:
  zookeeper:
    image: ghcr.io/arm64-compat/confluentinc/cp-zookeeper:7.1.1-arm64
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: ghcr.io/arm64-compat/confluentinc/cp-server:7.1.1-arm64
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: ghcr.io/arm64-compat/confluentinc/cp-schema-registry:7.1.1-arm64
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  postgres:
    image: postgres:14.3-alpine
    platform: linux/arm64/v8
    hostname: postgres
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'

  kafka-connect:
    image: ghcr.io/arm64-compat/confluentinc/cp-kafka-connect:7.1.1-arm64
    container_name: kafka-connect
    depends_on:
      - zookeeper
      - broker
      - postgres
    ports:
      - "8099:8083"
    environment:
      CONNECT_GROUP_ID: 1
      CONNECT_CONFIG_STORAGE_TOPIC: my-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: my-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: my-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_BOOTSTRAP_SERVERS: broker:29092
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components
      CONNECT_JDBC_DRIVERS: /usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc/lib/
      CONNECT_REST_ADVERTISED_HOST_NAME: localhost
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.5.0
        cp /usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc/lib/postgresql-42.3.3.jar /usr/share/confluent-hub-components
        /etc/confluent/docker/run

  akhq:
    image: tchiotludo/akhq
    depends_on:
      - broker
    hostname: akhq
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker:29092"
              schema-registry:
                url: "http://schema-registry:8081"
    ports:
      - "8070:8080"
    links:
      - broker
      - schema-registry

  # This "container" is a workaround to pre-create topics for the Kafka Music application
  # until we have a more elegant way to do that.
  kafka-create-topics:
    image: ghcr.io/arm64-compat/confluentinc/cp-kafka:7.1.1-arm64
    depends_on:
      - broker
    hostname: kafka-create-topics
    # We defined a dependency on "kafka", but `depends_on` will NOT wait for the
    # dependencies to be "ready" before starting the "kafka-create-topics"
    # container;  it waits only until the dependencies have started.  Hence we
    # must control startup order more explicitly.
    # See https://docs.docker.com/compose/startup-order/
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b broker:29092 1 20 && \
                       kafka-topics --create --topic transactions --if-not-exists --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \  
                       kafka-topics --create --topic instant-payment-metrics --if-not-exists --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \ 
                       kafka-topics --create --topic accounts --if-not-exists --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \ 
                       kafka-topics --create --topic customers --if-not-exists --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \ 
                       kafka-topics --create --topic customers-with-accounts --if-not-exists --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \ 
                       kafka-topics --create --topic card-orders --if-not-exists --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \ 
                       kafka-topics --create --topic card-orders-reply --if-not-exists --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \ 
                       kafka-topics --create --topic cards --if-not-exists --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \ 
                       kafka-topics --create --topic retry-commands --if-not-exists --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \ 
                       sleep infinity'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
